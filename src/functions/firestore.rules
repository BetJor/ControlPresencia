/**
 * @description: This ruleset enforces a role-based access control model with ownership considerations.
 * All data is organized into collections for employees, terminals, attendance records, and incident types.
 * The key security decisions are:
 * - Administrators can manage all data within the "terminals" and "incident_types" collections.
 * - Employees can only manage their own data within the "employees" collection and "attendance" subcollection.
 * - Listing of all employees is allowed for administrators to manage the directory.
 * - The 'role' field within the 'employees' documents is used for authorization.
 * - All write operations are restricted to authorized users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages employee profiles, with role-based access control (admin or self).
     * @path: /employees/{employeeId}
     * @allow: (create) If the user's UID matches the employeeId, allowing self-creation.
     * @allow: (get, list) If the user is an admin or if the requested employeeId matches the user's UID.
     * @allow: (update, delete) If the user is an admin or the owner of the document.
     * @deny: (create) If the user's UID does not match the employeeId.
     * @deny: (get, list, update, delete) If the user is not an admin and the employeeId does not match the user's UID.
     * @principle: Enforces role-based access and document ownership.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId));
      allow delete: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId));
    }

    /**
     * @description: Manages terminal information, accessible only by administrators.
     * @path: /terminals/{terminalId}
     * @allow: (create, get, list, update, delete) If the user is an admin.
     * @deny: (create, get, list, update, delete) If the user is not an admin.
     * @principle: Restricts terminal management to administrators.
     */
    match /terminals/{terminalId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description: Manages attendance records for each employee, accessible by admins and the respective employee.
     * @path: /employees/{employeeId}/attendance/{attendanceId}
     * @allow: (create, get, list, update, delete) If the user is an admin or the owner of the employeeId.
     * @deny: (create, get, list, update, delete) If the user is not an admin and not the owner of the employeeId.
     * @principle: Enforces ownership for attendance records within employee subcollections.
     */
    match /employees/{employeeId}/attendance/{attendanceId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow list: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow create: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow update: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId));
      allow delete: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId));
    }

    /**
     * @description: Manages incident types, accessible only by administrators.
     * @path: /incident_types/{incidentTypeId}
     * @allow: (create, get, list, update, delete) If the user is an admin.
     * @deny: (create, get, list, update, delete) If the user is not an admin.
     * @principle: Restricts incident type management to administrators.
     */
    match /incident_types/{incidentTypeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.role == 'admin';
    }
  }
}