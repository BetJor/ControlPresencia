/**
 * @fileoverview Firestore Security Rules for the Attendance Tracking System.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system with ownership constraints.
 * Administrators have broad access, while regular users primarily access their own data.
 *
 * Data Structure:
 * - /employees/{employeeId}: Employee profiles, with a 'role' field (e.g., 'admin').
 * - /terminals/{terminalId}: Terminal information, restricted to administrators.
 * - /employees/{employeeId}/attendance/{attendanceId}: Attendance records, accessible to admins and the respective employee.
 * - /incident_types/{incidentTypeId}: Incident types, restricted to administrators.
 *
 * Key Security Decisions:
 * - Administrators can manage all employee profiles, terminals and incident types.
 * - Employees can only manage their own profiles and attendance records.
 * - Listing all employees is allowed only for administrators.
 * - The 'role' field within the employee document is used for authorization.
 *
 * Denormalization for Authorization:
 * - The 'role' field is denormalized directly into the employee document to avoid costly `get()` calls when checking for admin privileges.
 *   Example: { members: { 'user_abc': 'editor' } }
 * Structural Segregation:
 * Data is segregated into distinct collections based on access control requirements. For example, employee profiles are stored separately from attendance records to allow for different security policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles. Admins can manage all users, and users can manage themselves.
     * @path /employees/{employeeId}
     * @allow (read, create, update, delete) if isSignedIn() && (isAdmin() || isOwner(employeeId))
     * @deny (create, update, delete) if !isSignedIn() || (!isAdmin() && !isOwner(employeeId))
     * @principle Enforces role-based access control and document ownership.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isOwner(employeeId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId)) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages terminal information. Only accessible by administrators.
     * @path /terminals/{terminalId}
     * @allow (read, create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts terminal management to administrators.
     */
    match /terminals/{terminalId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for each employee. Accessible by admins and the respective employee.
     * @path /employees/{employeeId}/attendance/{attendanceId}
     * @allow (read, create, update, delete) if isSignedIn() && (isAdmin() || isOwner(employeeId))
     * @deny (create, update, delete) if !isSignedIn() || (!isAdmin() && !isOwner(employeeId))
     * @principle Enforces document ownership for attendance records.
     */
    match /employees/{employeeId}/attendance/{attendanceId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow list: if isSignedIn() && (isAdmin() || isOwner(employeeId));
      allow create: if isSignedIn() && (request.resource.data.employeeId == employeeId) && isSignedIn();
      allow update: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId)) && (request.resource.data.employeeId == resource.data.employeeId);
      allow delete: if isSignedIn() && (isAdmin() || isExistingOwner(employeeId));
    }

    /**
     * @description Manages incident types. Only accessible by administrators.
     * @path /incident_types/{incidentTypeId}
     * @allow (read, create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts incident type management to administrators.
     */
    match /incident_types/{incidentTypeId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    match /visit_registrations/{visitRegistrationId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.role == 'admin';
    }
  }
}