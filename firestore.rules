/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic security model with the following principles:
 *
 * Core Philosophy:
 *  - Public Read, Authenticated Write: Most collections are publicly readable, but require authentication to modify.
 *  - No Data Validation: Data validation is not performed to allow for rapid prototyping.
 *
 * Data Structure:
 *  - Top-Level Collections: The database consists of several top-level collections:
 *    - /users/{userId}: Stores user profiles, secured by owner-only access.
 *    - /attendance_records/{attendanceRecordId}: Stores attendance records, publicly readable but create/update/delete operations are disallowed for now.
 *    - /terminals/{terminalId}: Stores terminal information, publicly readable but create/update/delete operations are disallowed for now.
 *    - /incident_types/{incidentTypeId}: Stores incident types, publicly readable but create/update/delete operations are disallowed for now.
 *    - /employees/{employeeId}: Stores employee information, publicly readable but create/update/delete operations are disallowed for now.
 *    - /visit_registrations/{visitRegistrationId}: Stores visit registration information, publicly readable but create/update/delete operations are disallowed for now.
 *    - /favorite_visitors/{favoriteVisitorId}: Stores favorite visitor information, publicly readable but create/update/delete operations are disallowed for now.
 *
 * Key Security Decisions:
 *  - User Listing Disallowed: Listing all users is explicitly denied.
 *  - Public Read Collections: The attendance_records, terminals, incident_types, employees, visit_registrations, and favorite_visitors collections are readable by anyone.
 *  - Authorization Independence: User roles are stored directly in the user document to avoid extra reads during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Only the user themselves can read, update, or delete their profile.
     * @deny (create) - If the user tries to create a profile with an ID that doesn't match their own.
     * @deny (update, delete) - If a different user tries to update or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Anyone can read the attendance records.
     * @deny (create, update, delete) - No one can create, update, or delete attendance records.
     * @principle Public read, no write access.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
    }

    /**
     * @description Manages access to terminals.
     * @path /terminals/{terminalId}
     * @allow (get, list) - Anyone can read the terminal information.
     * @deny (create, update, delete) - No one can create, update, or delete terminal information.
     * @principle Public read, no write access.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
    }

    /**
     * @description Manages access to incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (get, list) - Anyone can read the incident types.
     * @deny (create, update, delete) - No one can create, update, or delete incident types.
     * @principle Public read, no write access.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
    }

    /**
     * @description Manages access to employee information.
     * @path /employees/{employeeId}
     * @allow (get, list) - Anyone can read the employee information.
     * @deny (create, update, delete) - No one can create, update, or delete employee information.
     * @principle Public read, no write access.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
    }

    /**
     * @description Manages access to visit registrations.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (get, list) - Anyone can read visit registrations.
     * @deny (create, update, delete) - No one can create, update, or delete visit registrations.
     * @principle Public read, no write access.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if true;
    }

    /**
     * @description Manages access to favorite visitors.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (get, list) - Anyone can read favorite visitors.
     * @deny (create, update, delete) - No one can create, update, or delete favorite visitors.
     * @principle Public read, no write access.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if true;
    }
  }
}