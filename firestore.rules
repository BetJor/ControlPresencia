/**
 * @description This ruleset enforces a role-based access control model.
 * Data is organized into top-level collections representing different entities (users, attendance records, terminals, etc.).
 * Access to user data is restricted to the owner.
 * All other collections allow public read access, but writes are generally disallowed for clients.
 * The `usuaris_dins` and `directori` collections are intended for public read-only access, with writes managed by a trusted backend.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, role-based access.
 * - /attendance_records/{attendanceRecordId}: Attendance records, publicly readable.
 * - /terminals/{terminalId}: Terminal information, publicly readable.
 * - /incident_types/{incidentTypeId}: Incident types, publicly readable.
 * - /employees/{employeeId}: Employee information, publicly readable.
 * - /visit_registrations/{visitRegistrationId}: Visit registrations, publicly readable.
 * - /favorite_visitors/{favoriteVisitorId}: Favorite visitors, publicly readable.
 * - /usuaris_dins/{usuariId}: "Who's in" whiteboard, publicly readable.
 * - /directori/{directoriId}: Employee directory, publicly readable.
 * - /departaments/{departamentId}: Departments, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is denied.
 * - The `usuaris_dins`, `directori` and `departaments` collections are read-only for clients.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Any signed-in user can read attendance records.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to terminal information.
     * @path /terminals/{terminalId}
     * @allow (get, list) - Any signed-in user can read terminal information.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /terminals/{terminalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (get, list) - Any signed-in user can read incident types.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to employee information.
     * @path /employees/{employeeId}
     * @allow (get, list) - Any signed-in user can read employee information.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to visit registration information.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (get, list) - Any signed-in user can read visit registration information.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to favorite visitor information.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (get, list) - Any signed-in user can read favorite visitor information.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to the "Usuaris Dins" whiteboard.
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) - Any signed-in user can read the "Usuaris Dins" whiteboard.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes to a trusted backend.
     */
    match /usuaris_dins/{usuariId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to the employee directory.
     * @path /directori/{directoriId}
     * @allow (get, list) - Any signed-in user can read the employee directory.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes to a trusted backend.
     */
    match /directori/{directoriId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    /**
     * @description Controls access to the departments list.
     * @path /departaments/{departamentId}
     * @allow (get, list) - Any signed-in user can read the departments list.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access but restricts writes to a trusted backend.
     */
    match /departaments/{departamentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Writes only by backend.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}