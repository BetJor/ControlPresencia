/**
 * @fileoverview Firestore Security Rules for Clockwork application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by enforcing strict owner-only
 * access for user-related data and relies on denormalization for efficient
 * access control. Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the 'role' field denormalized for
 *   authorization independence.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records, with
 *   'employeeId' for filtering.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registration data.
 * - /favorite_visitors/{favoriteVisitorId}: Stores data about favorite visitors.
 * - /usuaris_dins/{usuariId}: "Whiteboard" collection of users currently in the office;
 *   written by a trusted backend, read by all authenticated users.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - The `usuaris_dins` collection is publicly readable by authenticated users, but
 *   only writable by a trusted backend (not covered by these rules).
 * - Data validation is minimal to enable rapid prototyping. Only authorization-critical
 *   fields are validated.
 *
 * Denormalization for Authorization:
 * - User roles are denormalized into the `users` document to avoid extra reads
 *   during authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource, ensuring the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    function getSelf() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }


    /**
     * @description Defines a named set of users who are admins.
     */
    function isAdmin() {
        return request.auth.uid in ["admin1", "admin2"];
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     * @allow (get, list, update, delete) - User with ID 'user123' reads, updates, or deletes their own profile.
     * @deny (create) - User with ID 'user456' tries to create a profile for 'user123'.
     * @deny (update, delete) - User with ID 'user456' tries to update or delete 'user123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Allow the user to read their own profile
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, validating the user ID in the document.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to update their own profile, enforcing immutability of the user ID.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /attendance_records/{attendanceRecordId} collection.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) - Any authenticated user can create an attendance record.
     * @allow (get, list) - Any authenticated user can read attendance records.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for AttendanceRecord.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /terminals/{terminalId} collection.
     * @path /terminals/{terminalId}
     * @allow (create) - Any authenticated user can create a terminal.
     * @allow (get, list) - Any authenticated user can read terminal data.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for Terminal.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /terminals/{terminalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /incident_types/{incidentTypeId} collection.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) - Any authenticated user can create an incident type.
     * @allow (get, list) - Any authenticated user can read incident type data.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for IncidentType.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (create) - Any authenticated user can create an employee.
     * @allow (get, list) - Any authenticated user can read employee data.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for Employee.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /visit_registrations/{visitRegistrationId} collection.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) - Any authenticated user can create a visit registration.
     * @allow (get, list) - Any authenticated user can read visit registration data.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for VisitRegistration.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /favorite_visitors/{favoriteVisitorId} collection.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) - Any authenticated user can create a favorite visitor.
     * @allow (get, list) - Any authenticated user can read favorite visitor data.
     * @allow (update, delete) - Only the owner can update/delete. Need to be implemented if ownership is defined for FavoriteVisitor.
     * @deny (update, delete) - If not owner, deny updates/deletes.
     * @principle Allows public read access but restricts writes to owners (if implemented).
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation if the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /usuaris_dins/{usuariId} collection.
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) - Any authenticated user can see who is in the office.
     * @deny (create, update, delete) - Only a trusted backend can modify this collection.
     * @principle Public read, backend-only write for a real-time "whiteboard".
     */
    match /usuaris_dins/{usuariId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}