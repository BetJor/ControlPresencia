/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model for the Clockwork application, focusing on user-specific data, attendance tracking, and directory services.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles with denormalized roles for efficient authorization.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records, linked to employees and terminals.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visitor registration details.
 * - /favorite_visitors/{favoriteVisitorId}: Stores favorite visitor details.
 * - /usuaris_dins/{usuariId}: Stores a real-time list of users currently in the office (whiteboard).
 * - /directori/{directoriId}: Stores employee directory information.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owner (the user themselves).
 * - The 'usuaris_dins' collection (whiteboard) is publicly readable by authenticated users but updatable only by a trusted backend.
 * - Data types and schema are not strictly validated in this prototyping phase, focusing instead on authorization.
 * - Listing of Attendance Records, Terminals, Incident Types, Employees, Visit Registrations and Favorite Visitors is open to all authenticated users.
 *
 * Denormalization for Authorization:
 * - User roles are denormalized directly into the /users/{userId} document to avoid expensive `get()` calls during authorization.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, while public information like the list of users currently in the office is stored in a separate top-level collection (/usuaris_dins).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the user to read and write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures attendance records, allowing any authenticated user to read and write.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) - Authenticated user can create an attendance record.
     * @allow (get, list) - Any authenticated user can get or list attendance records.
     * @allow (update, delete) - Authenticated user can update and delete any attendance record
     * @principle Allows open read and write access.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures terminals, allowing any authenticated user to read and write.
     * @path /terminals/{terminalId}
     * @allow (create) - Authenticated user can create a terminal.
     * @allow (get, list) - Any authenticated user can get or list terminals.
     * @allow (update, delete) - Authenticated user can update and delete any terminal.
     * @principle Allows open read and write access.
     */
    match /terminals/{terminalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures incident types, allowing any authenticated user to read and write.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) - Authenticated user can create an incident type.
     * @allow (get, list) - Any authenticated user can get or list incident types.
     * @allow (update, delete) - Authenticated user can update and delete any incident type.
     * @principle Allows open read and write access.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures employees, allowing any authenticated user to read and write.
     * @path /employees/{employeeId}
     * @allow (create) - Authenticated user can create an employee.
     * @allow (get, list) - Any authenticated user can get or list employees.
     * @allow (update, delete) - Authenticated user can update and delete any employee.
     * @principle Allows open read and write access.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures visit registrations, allowing any authenticated user to read and write.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) - Authenticated user can create a visit registration.
     * @allow (get, list) - Any authenticated user can get or list visit registrations.
     * @allow (update, delete) - Authenticated user can update and delete any visit registration.
     * @principle Allows open read and write access.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures favorite visitors, allowing any authenticated user to read and write.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) - Authenticated user can create a favorite visitor.
     * @allow (get, list) - Any authenticated user can get or list favorite visitors.
     * @allow (update, delete) - Authenticated user can update and delete any favorite visitor.
     * @principle Allows open read and write access.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures the list of users currently in the office ('whiteboard'). Read access is public for authenticated users, but write access is restricted.
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) - Any signed-in user can view who is currently in the office.
     * @deny (create, update, delete) - No client-side creation, update, or deletion allowed.
     * @principle Public read access for a real-time information board; backend-only writes.
     */
    match /usuaris_dins/{usuariId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the employee directory.
     * @path /directori/{directoriId}
     * @allow (create) - Authenticated user can create a directory entry.
     * @allow (get, list) - Any authenticated user can get or list directory entries.
     * @allow (update, delete) - Authenticated user can update and delete any directory entry.
     * @principle Allows open read and write access.
     */
    match /directori/{directoriId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}