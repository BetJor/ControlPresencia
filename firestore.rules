/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks and structural segregation for optimal security and performance.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the 'role' field denormalized for authorization independence.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registrations.
 * - /favorite_visitors/{favoriteVisitorId}: Stores favorite visitors.
 * - /usuaris_dins/{usuariId}: Stores users currently in the office ("whiteboard" data).
 * - /directori/{directoriId}: Stores employee directory information.
 * - /departaments/{departamentId}: Stores department names.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed due to the absence of a top-level listing rule on `/users`.
 * - The `usuaris_dins` collection (whiteboard) is publicly readable for authenticated users but writable only by a trusted backend.
 * - The `departaments` collection is publicly readable for authenticated users and writable only by a trusted backend.
 * - Ambiguous write permissions default to denial, requiring explicit allow conditions.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly within the `/users/{userId}` document to avoid costly `get()` calls when evaluating rules for user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'bmjLLdOrYGP9c0YagkxvzVmLeOH3' can create their own profile if request.auth.uid == userId.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for 'bmjLLdOrYGP9c0YagkxvzVmLeOH3'.
     * @allow (get) User with UID 'bmjLLdOrYGP9c0YagkxvzVmLeOH3' can read their own profile.
     * @deny (get) User with UID 'otherUserId' cannot read the profile of 'bmjLLdOrYGP9c0YagkxvzVmLeOH3'.
     * @allow (update) User with UID 'bmjLLdOrYGP9c0YagkxvzVmLeOH3' can update their own profile.
     * @deny (update) User with UID 'otherUserId' cannot update the profile of 'bmjLLdOrYGP9c0YagkxvzVmLeOH3'.
     * @allow (delete) User with UID 'bmjLLdOrYGP9c0YagkxvzVmLeOH3' can delete their own profile.
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile of 'bmjLLdOrYGP9c0YagkxvzVmLeOH3'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows read and write access to attendance records.  No ownership enforced, open access for authenticated users.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) Authenticated user can create an attendance record.
     * @allow (get) Authenticated user can read an attendance record.
     * @allow (update) Authenticated user can update an attendance record.
     * @allow (delete) Authenticated user can delete an attendance record.
     * @principle Open access for authenticated users.
     */
    match /attendance_records/{attendanceRecordId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to terminals. No ownership enforced, open access for authenticated users.
     * @path /terminals/{terminalId}
     * @allow (create) Authenticated user can create a terminal.
     * @allow (get) Authenticated user can read a terminal.
     * @allow (update) Authenticated user can update a terminal.
     * @allow (delete) Authenticated user can delete a terminal.
     * @principle Open access for authenticated users.
     */
    match /terminals/{terminalId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to incident types. No ownership enforced, open access for authenticated users.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) Authenticated user can create an incident type.
     * @allow (get) Authenticated user can read an incident type.
     * @allow (update) Authenticated user can update an incident type.
     * @allow (delete) Authenticated user can delete an incident type.
     * @principle Open access for authenticated users.
     */
    match /incident_types/{incidentTypeId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to employees. No ownership enforced, open access for authenticated users.
     * @path /employees/{employeeId}
     * @allow (create) Authenticated user can create an employee.
     * @allow (get) Authenticated user can read an employee.
     * @allow (update) Authenticated user can update an employee.
     * @allow (delete) Authenticated user can delete an employee.
     * @principle Open access for authenticated users.
     */
    match /employees/{employeeId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to visit registrations. No ownership enforced, open access for authenticated users.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) Authenticated user can create a visit registration.
     * @allow (get) Authenticated user can read a visit registration.
     * @allow (update) Authenticated user can update a visit registration.
     * @allow (delete) Authenticated user can delete a visit registration.
     * @principle Open access for authenticated users.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to favorite visitors. No ownership enforced, open access for authenticated users.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) Authenticated user can create a favorite visitor.
     * @allow (get) Authenticated user can read a favorite visitor.
     * @allow (update) Authenticated user can update a favorite visitor.
     * @allow (delete) Authenticated user can delete a favorite visitor.
     * @principle Open access for authenticated users.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read and write access to usuaris_dins.  Writes should be restricted to a trusted backend process in production.
     * @path /usuaris_dins/{usuariId}
     * @allow (create) Authenticated user can create an entry.
     * @allow (get) Authenticated user can read an entry.
     * @allow (update) Authenticated user can update an entry.
     * @allow (delete) Authenticated user can delete an entry.
     * @principle Open access for authenticated users. Writes should be secured to a trusted backend.
     */
    match /usuaris_dins/{usuariId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read access to the directory.  Write access should be restricted to a trusted backend process.
     * @path /directori/{directoriId}
     * @allow (get) Any user can read from the directory.
     * @allow (list) Any user can list entries in the directory.
     * @deny (create) No one can create entries directly.
     * @deny (update) No one can update entries directly.
     * @deny (delete) No one can delete entries directly.
     * @principle Public read access, private write access.
     */
    match /directori/{directoriId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to the departments collection.  Write access should be restricted to a trusted backend process.
     * @path /departaments/{departamentId}
     * @allow (get) Any user can read department names.
     * @allow (list) Any user can list department names.
     * @deny (create) No one can create departments directly.
     * @deny (update) No one can update departments directly.
     * @deny (delete) No one can delete departments directly.
     * @principle Public read access, private write access.
     */
    match /departaments/{departamentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document and the document exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}