rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the user themselves can read/write their profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) Authenticated user can create an attendance record.
     * @allow (get, list) Any authenticated user can read attendance records.
     * @deny (update, delete) No one can update or delete attendance records in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /attendance_records/{attendanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to terminal information.
     * @path /terminals/{terminalId}
     * @allow (get, list) Any authenticated user can read terminal information.
     * @deny (create, update, delete) No one can create, update, or delete terminals in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /terminals/{terminalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (get, list) Any authenticated user can read incident types.
     * @deny (create, update, delete) No one can create, update, or delete incident types in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /incident_types/{incidentTypeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to employee information.
     * @path /employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employee information.
     * @deny (create, update, delete) No one can create, update, or delete employees in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to visit registration information.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) Any authenticated user can create visit registration data.
     * @allow (get, list) Any authenticated user can read visit registration data.
     * @deny (update, delete) No one can update or delete visit registration data in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /visit_registrations/{visitRegistrationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to favorite visitor information.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) Any authenticated user can create favorite visitor data.
     * @allow (get, list) Any authenticated user can read favorite visitor data.
     * @deny (update, delete) No one can update or delete favorite visitor data in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to users currently in the office (whiteboard).
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) Any authenticated user can read who is currently in the office.
     * @deny (create, update, delete) No one can create, update, or delete this data via client.
     * @principle Public read for authenticated users, backend-only writes.
     */
    match /usuaris_dins/{usuariId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the employee directory.
     * @path /directori/{directoriId}
     * @allow (get, list) Any authenticated user can read the employee directory.
     * @deny (create, update, delete) No one can create, update, or delete employee directory entries in this prototype.
     * @principle Public read, owner-only writes with validation.
     */
    match /directori/{directoriId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}