/**
 * @file Overview
 * This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the user's role denormalized directly into the document for efficient authorization.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records, with `employeeId` to associate records with employees.
 * - /terminals/{terminalId}: Stores information about terminals.
 * - /incident_types/{incidentTypeId}: Stores types of incidents.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registrations.
 * - /favorite_visitors/{favoriteVisitorId}: Stores favorite visitor information.
 * - /usuaris_dins/{usuariId}: Stores data about users currently inside the office (whiteboard). Intended to be written by a trusted backend.
 * - /directori/{directoriId}: Stores employee directory information.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - The /usuaris_dins collection is readable by any authenticated user, but writes are restricted (intended for backend processes).
 * - The /directori collection is readable by any authenticated user, but writes are restricted (intended for backend processes).
 * - Other collections are generally writable by anyone (for prototyping purposes).
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the `/users/{userId}` document to avoid costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (create) User 'n3JwHYpMBvMN40SoyMk8PJF6iJ12' can create their own profile at /users/n3JwHYpMBvMN40SoyMk8PJF6iJ12.
     * @deny (create) User 'n3JwHYpMBvMN40SoyMk8PJF6iJ12' cannot create a profile at /users/otherUserId.
     * @allow (read, write) User 'n3JwHYpMBvMN40SoyMk8PJF6iJ12' can read and write their own profile.
     * @deny (read, write) User 'n3JwHYpMBvMN40SoyMk8PJF6iJ12' cannot read or write another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) Any authenticated user can create an attendance record.
     * @allow (read, write) Any authenticated user can read and write attendance records.
     * @principle Open write access for prototyping.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to terminal information.
     * @path /terminals/{terminalId}
     * @allow (create) Any authenticated user can create terminal information.
     * @allow (read, write) Any authenticated user can read and write terminal information.
     * @principle Open write access for prototyping.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) Any authenticated user can create incident types.
     * @allow (read, write) Any authenticated user can read and write incident types.
     * @principle Open write access for prototyping.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to employee information.
     * @path /employees/{employeeId}
     * @allow (create) Any authenticated user can create employee information.
     * @allow (read, write) Any authenticated user can read and write employee information.
     * @principle Open write access for prototyping.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to visit registration information.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) Any authenticated user can create visit registration information.
     * @allow (read, write) Any authenticated user can read and write visit registration information.
     * @principle Open write access for prototyping.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to favorite visitor information.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) Any authenticated user can create favorite visitor information.
     * @allow (read, write) Any authenticated user can read and write favorite visitor information.
     * @principle Open write access for prototyping.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read access to users inside the office. Writes should be done by a trusted backend.
     * @path /usuaris_dins/{usuariId}
     * @allow (read) Any authenticated user can read this "whiteboard" data.
     * @deny (write) Only a trusted backend should write to this collection.
     * @principle Open read access for the "whiteboard" collection.
     */
    match /usuaris_dins/{usuariId} {
      allow get, list: if isSignedIn();
      allow create: if false; // Only trusted backend can create.
      allow update: if false && resource != null; // Only trusted backend can update.
      allow delete: if false && resource != null; // Only trusted backend can delete.
    }

      /**
     * @description Allows read access to employee directory information. Writes should be done by a trusted backend.
     * @path /directori/{directoriId}
     * @allow (read) Any authenticated user can read the directory.
     * @deny (write) Only a trusted backend should write to the directory.
     * @principle Open read access for the directory collection.
     */
    match /directori/{directoriId} {
      allow get, list: if isSignedIn();
      allow create: if false; // Only trusted backend can create.
      allow update: if false && resource != null; // Only trusted backend can update.
      allow delete: if false && resource != null; // Only trusted backend can delete.
    }


    function isSignedIn() {
      return request.auth != null;
    }
  }
}