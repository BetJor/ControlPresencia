/**
 * @fileoverview Firestore Security Rules for Clockwork application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on user roles and resource ownership.
 * It aims for clear, maintainable rules that avoid complex queries.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, including roles, for authorization.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records, linked to employees and terminals.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registration data.
 * - /favorite_visitors/{favoriteVisitorId}: Stores data about favourite visitors.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Access to user data is restricted to the owning user.
 * - Public read access is not generally granted, except where explicitly intended and secured with ownership checks on writes.
 *
 * Denormalization for Authorization:
 * - User roles are denormalized into the /users/{userId} document to enable Authorization Independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the structure and enforces permissions for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @deny (create) - Authenticated user cannot create a profile with a userId that doesn't match their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (get, update, delete) - Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the structure and enforces permissions for attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Defines the structure and enforces permissions for terminals.
     * @path /terminals/{terminalId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Defines the structure and enforces permissions for incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Defines the structure and enforces permissions for employees.
     * @path /employees/{employeeId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Defines the structure and enforces permissions for visit registrations.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Defines the structure and enforces permissions for favorite visitors.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) - Allows any authenticated user to create.
     * @deny (create) - Always validate the create operation.
     * @allow (get, list) - Allows any authenticated user to get and list.
     * @allow (update, delete) - No update or delete allowed.
     * @principle Enforces open read, limited write.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}