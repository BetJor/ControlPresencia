rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access but restricts writes to owners for attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) - Any user (authenticated or not) can read attendance records.
     * @allow (create) - A user can create an attendance record with their UID as the employeeId.
     * @allow (update, delete) - Only the owner (identified by employeeId) can update or delete an attendance record.
     * @deny (create) - A user cannot create an attendance record with an employeeId that doesn't match their UID.
     * @principle Provides public read access with owner-only writes, validating ownership on create, update, and delete.
     */
    match /attendance_records/{attendanceRecordId} {
      function isOwner(attendanceRecordId) {
        return request.auth.uid == get(/databases/$(database)/documents/attendance_records/$(attendanceRecordId)).data.employeeId;
      }

       function isCreatingAsOwner() {
        return request.auth.uid == request.resource.data.employeeId;
      }

       function isExistingOwner(attendanceRecordId) {
          return isSignedIn() && isOwner(attendanceRecordId);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.employeeId == request.auth.uid;
      allow update: if isExistingOwner(attendanceRecordId);
      allow delete: if isExistingOwner(attendanceRecordId);
    }

    /**
     * @description Allows public read access but restricts writes to authenticated users for terminals.
     * @path /terminals/{terminalId}
     * @allow (get, list) - Any user can read terminal information.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete terminal information.
     * @principle Provides public read access with authenticated-user-only writes.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access but restricts writes to authenticated users for incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (get, list) - Any user can read incident type information.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete incident type information.
     * @principle Provides public read access with authenticated-user-only writes.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access but restricts writes to authenticated users for employees.
     * @path /employees/{employeeId}
     * @allow (get, list) - Any user can read employee information.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete employee information.
     * @principle Provides public read access with authenticated-user-only writes.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access but restricts writes to authenticated users for visit registrations.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (get, list) - Any user can read visit registration information.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete visit registration information.
     * @principle Provides public read access with authenticated-user-only writes.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}