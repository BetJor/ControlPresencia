/**
 * @fileOverview Firestore Security Rules for Clockwork application.
 *
 * Core Philosophy:
 * This ruleset provides complete access to any authenticated user for all data within the application.
 * This is suitable for prototyping, but NOT for production.
 *
 * Data Structure:
 * The Firestore database contains collections for users, attendance records, terminals, incident types,
 * employees, visit registrations, favorite visitors, current users (usuaris_dins),
 * employee directory (directori), and departments (departaments).
 *
 * Key Security Decisions:
 * - All authenticated users have read and write access to all collections.
 * - No validation is enforced on data shapes to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants complete read and write access to any authenticated user for user profiles.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list user profiles.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage user profiles.
     */
    match /users/{userId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list attendance records.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage attendance records.
     */
    match /attendance_records/{attendanceRecordId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for terminals.
     * @path /terminals/{terminalId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list terminals.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage terminals.
     */
    match /terminals/{terminalId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list incident types.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage incident types.
     */
    match /incident_types/{incidentTypeId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for employees.
     * @path /employees/{employeeId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list employees.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage employees.
     */
    match /employees/{employeeId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for visit registrations.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list visit registrations.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage visit registrations.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for favorite visitors.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list favorite visitors.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage favorite visitors.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for current users (usuaris_dins).
     * @path /usuaris_dins/{usuariId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list current users.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage current users.
     */
    match /usuaris_dins/{usuariId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for employee directory (directori).
     * @path /directori/{directoriId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list employee directory entries.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage employee directory entries.
     */
    match /directori/{directoriId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Grants complete read and write access to any authenticated user for departments (departaments).
     * @path /departaments/{departamentId}
     * @allow (create, update, delete, get, list) - Any authenticated user can create, update, delete, get, and list departments.
     * @deny (none) - There are no restrictions for authenticated users.
     * @principle Allows any authenticated user to manage departments.
     */
    match /departaments/{departamentId} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}