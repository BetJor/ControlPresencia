/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with owner-based restrictions, designed for the attendance tracking application.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /employees/{employeeId}/attendance/{attendanceId}: Stores attendance records for each employee.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 *
 * Key Security Decisions:
 * - Administrators have full access to all Terminals and Incident Types.
 * - Employees can only manage their own profiles and attendance records.
 * - Listing all employees is allowed to admin roles.
 *
 * Denormalization for Authorization:
 * - Employee documents contain a 'role' field that is used to determine admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles. Admins can read/write all profiles. Users can only manage their own.
     * @path /employees/{employeeId}
     * @allow (read, get) if isSignedIn() && (isOwner(employeeId) || isAdmin());
     * @allow (list) if isSignedIn() && isAdmin();
     * @allow (create) if isSignedIn() && isOwner(employeeId);
     * @allow (update, delete) if isSignedIn() && isExistingOwner(employeeId);
     * @deny (create) if !isSignedIn() || !isOwner(employeeId);
     * @deny (update, delete) if !isSignedIn() || !isExistingOwner(employeeId);
     * @deny (list) if !isSignedIn() || !isAdmin();
     * @principle Enforces document ownership for writes and admin role for broad access.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && (isOwner(employeeId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update, delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Manages terminal information. Only accessible by administrators.
     * @path /terminals/{terminalId}
     * @allow (read, get, list) if isSignedIn() && isAdmin();
     * @allow (create, update, delete) if isSignedIn() && isAdmin();
     * @deny (read, get, list) if !isSignedIn() || !isAdmin();
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin();
     * @principle Restricts terminal management to administrators.
     */
    match /terminals/{terminalId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for each employee. Accessible by admins and the respective employee.
     * @path /employees/{employeeId}/attendance/{attendanceId}
     * @allow (read, get, list) if isSignedIn() && (isOwner(employeeId) || isAdmin());
     * @allow create: if isSignedIn() && (request.resource.data.employeeId == employeeId || isAdmin());
     * @allow update, delete: if isSignedIn() && isExistingAttendanceOwner(employeeId);
     * @deny (read, get, list) if !isSignedIn() || (!isOwner(employeeId) && !isAdmin());
     * @deny create: if !isSignedIn() || (request.resource.data.employeeId != employeeId && !isAdmin());
     * @deny update, delete: if !isSignedIn() || !isExistingAttendanceOwner(employeeId);
     * @principle Enforces document ownership for attendance records.
     */
    match /employees/{employeeId}/attendance/{attendanceId} {
      allow get, list: if isSignedIn() && (isOwner(employeeId) || isAdmin());
      allow create: if isSignedIn() && (request.resource.data.employeeId == employeeId || isAdmin());
      allow update, delete: if isSignedIn() && isExistingAttendanceOwner(employeeId);
    }

    /**
     * @description Manages incident types. Only accessible by administrators.
     * @path /incident_types/{incidentTypeId}
     * @allow (read, get, list) if isSignedIn() && isAdmin();
     * @allow (create, update, delete) if isSignedIn() && isAdmin();
     * @deny (read, get, list) if !isSignedIn() || !isAdmin();
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin();
     * @principle Restricts incident type management to administrators.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.role == 'admin';
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isExistingAttendanceOwner(employeeId) {
      return (isOwner(employeeId) || isAdmin()) && resource != null;
    }
  }
}