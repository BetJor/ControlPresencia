/**
 * @file Firestore Security Rules for Clockwork application.
 *
 * @core_philosophy This ruleset enforces a role-based access control model.  Users have roles (e.g., 'admin', 'standard') stored in their user document.
 *
 * @data_structure
 * - `/users/{userId}`: Stores user profiles, with the user's role denormalized directly on the document.
 * - `/attendance_records/{attendanceRecordId}`: Stores attendance records.
 * - `/terminals/{terminalId}`: Stores terminal information.
 * - `/incident_types/{incidentTypeId}`: Stores incident types.
 * - `/employees/{employeeId}`: Stores employee information.
 * - `/visit_registrations/{visitRegistrationId}`: Stores visit registration information.
 * - `/favorite_visitors/{favoriteVisitorId}`: Stores favorite visitor information.
 *
 * @key_security_decisions
 * - All write operations require an authenticated user.
 * - Role-based access control is used where applicable, with 'admin' having elevated privileges.
 * - Data validation is limited to authorization-critical fields during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user's ID matches the resource's user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the "admin" role.
     * @details Requires fetching the user document to check the role.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User n3JwHYpMBvMN40SoyMk8PJF6iJ12 can create their own user document.
     * @allow (get) User n3JwHYpMBvMN40SoyMk8PJF6iJ12 can get their own user document.
     * @allow (list) User n3JwHYpMBvMN40SoyMk8PJF6iJ12 can list their own user document.
     * @allow (update) User n3JwHYpMBvMN40SoyMk8PJF6iJ12 can update their own user document.
     * @allow (delete) User n3JwHYpMBvMN40SoyMk8PJF6iJ12 can delete their own user document.
     * @deny (create) User otherUserId cannot create a user document with ID n3JwHYpMBvMN40SoyMk8PJF6iJ12.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /attendance_records/{attendanceRecordId} collection.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) An admin can create attendance records.
     * @allow (get) Anyone can get attendance records.
     * @allow (list) Anyone can list attendance records.
     * @allow (update) An admin can update attendance records.
     * @allow (delete) An admin can delete attendance records.
     * @deny (create) A non-admin user cannot create an attendance record.
     * @principle Requires admin role for creates, updates, and deletes.  Allows public read access.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /terminals/{terminalId} collection.
     * @path /terminals/{terminalId}
     * @allow (create) An admin can create terminals.
     * @allow (get) Anyone can get terminal information.
     * @allow (list) Anyone can list terminal information.
     * @allow (update) An admin can update terminals.
     * @allow (delete) An admin can delete terminals.
     * @deny (create) A non-admin user cannot create a terminal.
     * @principle Requires admin role for creates, updates, and deletes.  Allows public read access.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /incident_types/{incidentTypeId} collection.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) An admin can create incident types.
     * @allow (get) Anyone can get incident type information.
     * @allow (list) Anyone can list incident types.
     * @allow (update) An admin can update incident types.
     * @allow (delete) An admin can delete incident types.
     * @deny (create) A non-admin user cannot create an incident type.
     * @principle Requires admin role for creates, updates, and deletes.  Allows public read access.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (create) An admin can create employees.
     * @allow (get) Anyone can get employee information.
     * @allow (list) Anyone can list employees.
     * @allow (update) An admin can update employees.
     * @allow (delete) An admin can delete employees.
     * @deny (create) A non-admin user cannot create an employee.
     * @principle Requires admin role for creates, updates, and deletes. Allows public read access.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /visit_registrations/{visitRegistrationId} collection.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) Anyone can create a visit registration.
     * @allow (get) Anyone can get visit registration information.
     * @allow (list) Anyone can list visit registrations.
     * @allow (update) An admin can update visit registrations.
     * @allow (delete) An admin can delete visit registrations.
     * @deny (update) A non-admin user cannot update visit registrations.
     * @deny (delete) A non-admin user cannot delete visit registrations.
     * @principle Allows public create, get, and list. Requires admin role for updates and deletes.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list, create: if true;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /favorite_visitors/{favoriteVisitorId} collection.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) An admin can create favorite visitors.
     * @allow (get) Anyone can get favorite visitor information.
     * @allow (list) Anyone can list favorite visitors.
     * @allow (update) An admin can update favorite visitors.
     * @allow (delete) An admin can delete favorite visitors.
     * @deny (create) A non-admin user cannot create favorite visitors.
     * @principle Requires admin role for creates, updates, and deletes. Allows public read access.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}