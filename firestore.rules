/**
 * @fileoverview Firestore Security Rules for the Clockwork application.
 *
 * Core Philosophy: This ruleset prioritizes a secure-by-default posture, with fine-grained access control based on user authentication and, where applicable, ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owning user. The `role` field is denormalized to facilitate authorization.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records; access is generally open, as is the case with public-facing collections.
 * - /terminals/{terminalId}: Stores terminal information; access is generally open.
 * - /incident_types/{incidentTypeId}: Stores incident types; access is generally open.
 * - /employees/{employeeId}: Stores employee information; access is generally open.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registration information; access is generally open.
 * - /favorite_visitors/{favoriteVisitorId}: Stores favorite visitor information; access is generally open.
 * - /usuaris_dins/{usuariId}: Stores presence information; access is open to authenticated users. This data is managed by a trusted backend process.
 * - /directori/{directoriId}: Stores employee directory information; access is generally open.
 * - /departaments/{departamentId}: Stores department names; access is generally open.
 *
 * Key Security Decisions:
 * - Public Read Access: Collections like `attendance_records`, `terminals`, `incident_types`, `employees`, `visit_registrations`, `favorite_visitors`, `usuaris_dins`, `directori`, and `departaments` are intended for public read access and, as such, `get` and `list` operations are allowed for all users.
 * - User-Owned Data: The `/users/{userId}` collection enforces strict ownership; each user can only access their own profile.
 * - Backend-Managed Data: The `usuaris_dins` collection is managed by a trusted backend process, which simplifies client-side security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile (isOwner).
     * @allow (get, list) User with ID 'user123' can read their own profile (isOwner).
     * @allow (update, delete) User with ID 'user123' can update/delete their own profile (isOwner and profile exists).
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123' (not isOwner).
     * @deny (get, list) User with ID 'user456' cannot read the profile of 'user123' (not isOwner).
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to attendance records.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (get, list) Any user can read attendance records.
     * @deny (create) No user can create attendance records. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update attendance records. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete attendance records. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /attendance_records/{attendanceRecordId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to terminal information.
     * @path /terminals/{terminalId}
     * @allow (get, list) Any user can read terminal information.
     * @deny (create) No user can create terminal information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update terminal information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete terminal information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /terminals/{terminalId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to incident types.
     * @path /incident_types/{incidentTypeId}
     * @allow (get, list) Any user can read incident types.
     * @deny (create) No user can create incident types. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update incident types. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete incident types. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /incident_types/{incidentTypeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to employee information.
     * @path /employees/{employeeId}
     * @allow (get, list) Any user can read employee information.
     * @deny (create) No user can create employee information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update employee information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete employee information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to visit registration information.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (get, list) Any user can read visit registration information.
     * @deny (create) No user can create visit registration information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update visit registration information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete visit registration information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to favorite visitor information.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (get, list) Any user can read favorite visitor information.
     * @deny (create) No user can create favorite visitor information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update favorite visitor information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete favorite visitor information. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to UsuariDins (users inside) information.
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) Any authenticated user can read the list of users inside.
     * @deny (create) No user can create entries via the client; this is handled by a trusted backend process.
     * @deny (update) No user can update entries via the client; this is handled by a trusted backend process.
     * @deny (delete) No user can delete entries via the client; this is handled by a trusted backend process.
     * @principle Allows public read access for authenticated users, restricts write access to a trusted backend.
     */
    match /usuaris_dins/{usuariId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to the employee directory.
     * @path /directori/{directoriId}
     * @allow (get, list) Any user can read employee directory information.
     * @deny (create) No user can create entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /directori/{directoriId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to the list of departments.
     * @path /departaments/{departamentId}
     * @allow (get, list) Any user can read department information.
     * @deny (create) No user can create entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete entries. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts write access.
     */
    match /departaments/{departamentId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}