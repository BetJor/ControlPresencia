/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with an emphasis on authorization independence and structural segregation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the 'role' field denormalized for efficient authorization.
 * - /attendance_records/{attendanceRecordId}: Stores attendance records.
 * - /terminals/{terminalId}: Stores terminal information.
 * - /incident_types/{incidentTypeId}: Stores incident types.
 * - /employees/{employeeId}: Stores employee information.
 * - /visit_registrations/{visitRegistrationId}: Stores visit registration data.
 * - /favorite_visitors/{favoriteVisitorId}: Stores information about favorite visitors.
 * - /usuaris_dins/{usuariId}: Stores a 'whiteboard' of users currently in the office, intended for public read access.
 * - /directori/{directoriId}: Stores employee directory information.
 * - /departaments/{departamentId}: Stores department names for filtering purposes.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - The 'usuaris_dins' collection is designed for public read access by authenticated users.
 * - The 'departaments' collection is designed for public read access.
 * - The default security posture is strict, requiring explicit rules for each operation.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly within the /users/{userId} document. This avoids needing to perform `get()` operations to determine a user's role when accessing other data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can get, update, and delete their own profile if the userId matches their auth.uid.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (get, update, delete) if the userId does not match the authenticated user's ID.
     * @deny (list) Prevents listing all users.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Manages attendance records. All read and write operations are denied for now.
     * @path /attendance_records/{attendanceRecordId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to attendance records is currently restricted.
     */
    match /attendance_records/{attendanceRecordId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages terminals. All read and write operations are denied for now.
     * @path /terminals/{terminalId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to terminals is currently restricted.
     */
    match /terminals/{terminalId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages incident types. All read and write operations are denied for now.
     * @path /incident_types/{incidentTypeId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to incident types is currently restricted.
     */
    match /incident_types/{incidentTypeId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages employees. All read and write operations are denied for now.
     * @path /employees/{employeeId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to employees is currently restricted.
     */
    match /employees/{employeeId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages visit registrations. All read and write operations are denied for now.
     * @path /visit_registrations/{visitRegistrationId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to visit registrations is currently restricted.
     */
    match /visit_registrations/{visitRegistrationId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages favorite visitors. All read and write operations are denied for now.
     * @path /favorite_visitors/{favoriteVisitorId}
     * @allow (create) Not granted.
     * @allow (get, list) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (get, list) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to favorite visitors is currently restricted.
     */
    match /favorite_visitors/{favoriteVisitorId} {
      allow create: if false;
      allow get, list: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages the 'usuaris_dins' collection, representing users currently in the office.
     * @path /usuaris_dins/{usuariId}
     * @allow (get, list) Allows any authenticated user to read the "whiteboard" of current users.
     * @allow (create) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Provides public read access for authenticated users to the 'usuaris_dins' collection.
     */
    match /usuaris_dins/{usuariId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages the 'directori' collection, representing the company directory.
     * @path /directori/{directoriId}
     * @allow (get, list) Not granted.
     * @allow (create) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (get, list) Always denied.
     * @deny (create) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Access to the company directory is currently restricted.
     */
    match /directori/{directoriId} {
      allow get, list: if false;
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Manages the 'departaments' collection, representing department names.
     * @path /departaments/{departamentId}
     * @allow (get, list) Allows public read access to the department list.
     * @allow (create) Not granted.
     * @allow (update, delete) Not granted.
     * @deny (create) Always denied.
     * @deny (update, delete) Always denied.
     * @principle Provides public read access to the 'departaments' collection.
     */
    match /departaments/{departamentId} {
      allow get, list: if true;
      allow create: if false;
      allow update, delete: if false;
    }
  }
}