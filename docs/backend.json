{
  "entities": {
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Employee entity."
        },
        "firstName": {
          "type": "string",
          "description": "The employee's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The employee's last name."
        },
        "email": {
          "type": "string",
          "description": "The employee's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The employee's role (e.g., admin, user)."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "role"
      ]
    },
    "Terminal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Terminal",
      "type": "object",
      "description": "Represents a terminal used for attendance tracking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Terminal entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the terminal."
        },
        "location": {
          "type": "string",
          "description": "The location of the terminal."
        }
      },
      "required": [
        "id",
        "name",
        "location"
      ]
    },
    "AttendanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AttendanceRecord",
      "type": "object",
      "description": "Represents an attendance record for an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AttendanceRecord entity."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N AttendanceRecord)"
        },
        "terminalId": {
          "type": "string",
          "description": "Reference to Terminal. (Relationship: Terminal 1:N AttendanceRecord)"
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the attendance record.",
          "format": "date-time"
        },
        "incidentCode": {
          "type": "string",
          "description": "The incident code associated with the attendance record (if any)."
        }
      },
      "required": [
        "id",
        "employeeId",
        "terminalId",
        "timestamp"
      ]
    },
    "IncidentType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IncidentType",
      "type": "object",
      "description": "Represents a type of incident.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the IncidentType entity."
        },
        "code": {
          "type": "string",
          "description": "The incident code."
        },
        "description": {
          "type": "string",
          "description": "A description of the incident type."
        }
      },
      "required": [
        "id",
        "code",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee profiles. Includes the 'role' field for authorization. Allows admins to manage all users and users to manage themselves.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "/terminals/{terminalId}",
        "definition": {
          "entityName": "Terminal",
          "schema": {
            "$ref": "#/backend/entities/Terminal"
          },
          "description": "Stores terminal information. Only accessible by administrators.",
          "params": [
            {
              "name": "terminalId",
              "description": "The unique identifier for the terminal."
            }
          ]
        }
      },
      {
        "path": "/employees/{employeeId}/attendance/{attendanceId}",
        "definition": {
          "entityName": "AttendanceRecord",
          "schema": {
            "$ref": "#/backend/entities/AttendanceRecord"
          },
          "description": "Stores attendance records for each employee. Accessible by admins and the respective employee.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            },
            {
              "name": "attendanceId",
              "description": "The unique identifier for the attendance record."
            }
          ]
        }
      },
      {
        "path": "/incident_types/{incidentTypeId}",
        "definition": {
          "entityName": "IncidentType",
          "schema": {
            "$ref": "#/backend/entities/IncidentType"
          },
          "description": "Stores incident types. Only accessible by administrators.",
          "params": [
            {
              "name": "incidentTypeId",
              "description": "The unique identifier for the incident type."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to address the 'Missing or insufficient permissions' error by enforcing clear ownership and access control. The core principle is Authorization Independence, achieved through denormalization of roles, avoiding `get()` calls in security rules. The structure is segregated to maintain homogeneous security postures within collections.\n\nThe error indicates a 'list' operation failure on the `directori` collection. This suggests that the current user (`hS1jYKiXYkP1wsB9PyWRIKX4Y3x2`) does not have the necessary permissions to list documents in that collection. Based on the application requirements, the `directori` collection probably refers to the employees. Thus the structure assumes the need to list employees to manage data.\n\nTo resolve the permission error and meet app requirements, I have implemented the following strategy:\n\n1.  **Employees:** Store employee profiles in `/employees/{employeeId}`. Administrators can read all profiles. Individual employees can only read their own profile. Roles (`admin`) are managed in the document.\n2.  **Terminals:** Store terminals in `/terminals/{terminalId}`. Only administrators can create, read, update, and delete terminals.\n3.  **Attendance Records:** Store attendance records in `/employees/{employeeId}/attendance/{attendanceId}`. This structure ensures that only the admin and the corresponding employee can read the data.\n4.  **Incident Types:** Store incident types in `/incident_types/{incidentTypeId}`. Only administrators can create, read, update, and delete incident types.\n\nThis structure facilitates Authorization Independence by avoiding `get()` calls in security rules. It supports the required QAPs (Rules are not Filters) by segregating data based on ownership and role, making `list` operations secure and efficient."
  }
}