{
  "entities": {
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Employee entity."
        },
        "firstName": {
          "type": "string",
          "description": "The employee's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The employee's last name."
        },
        "email": {
          "type": "string",
          "description": "The employee's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Terminal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Terminal",
      "type": "object",
      "description": "Represents a terminal used for attendance tracking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Terminal entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the terminal."
        },
        "location": {
          "type": "string",
          "description": "The location of the terminal."
        }
      },
      "required": [
        "id",
        "name",
        "location"
      ]
    },
    "IncidentType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IncidentType",
      "type": "object",
      "description": "Represents a type of incident that can be associated with an attendance record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the IncidentType entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the incident type."
        },
        "description": {
          "type": "string",
          "description": "A description of the incident type."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "AttendanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AttendanceRecord",
      "type": "object",
      "description": "Represents an attendance record for an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AttendanceRecord entity."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N AttendanceRecord)"
        },
        "terminalId": {
          "type": "string",
          "description": "Reference to Terminal. (Relationship: Terminal 1:N AttendanceRecord)"
        },
        "incidentTypeId": {
          "type": "string",
          "description": "Reference to IncidentType. (Relationship: IncidentType 1:N AttendanceRecord). Can be null if no incident."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the attendance record.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "employeeId",
        "terminalId",
        "timestamp"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firebaseUid": {
          "type": "string",
          "description": "The Firebase UID associated with the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., admin, standard).",
          "format": "string"
        }
      },
      "required": [
        "id",
        "firebaseUid",
        "role"
      ]
    },
    "VisitRegistration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VisitRegistration",
      "type": "object",
      "description": "Represents a registration of a visit including the name and company",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the visitor."
        },
        "company": {
          "type": "string",
          "description": "Company of the visitor."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of when the visit was registered."
        }
      },
      "required": [
        "name",
        "company",
        "timestamp"
      ]
    },
    "FavoriteVisitor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FavoriteVisitor",
      "type": "object",
      "description": "Represents a favorite visitor with their name and company.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the favorite visitor."
        },
        "company": {
          "type": "string",
          "description": "Company of the favorite visitor."
        }
      },
      "required": [
        "name",
        "company"
      ]
    },
    "UsuariDins": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UsuariDins",
      "type": "object",
      "description": "Represents a user currently inside the office, acting as a lightweight 'whiteboard'.",
      "properties": {
        "nom": {
          "type": "string",
          "description": "First name of the user."
        },
        "cognoms": {
          "type": "string",
          "description": "Last name of the user."
        },
        "horaDarreraEntrada": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the user's last entry."
        }
      },
      "required": [
        "nom",
        "cognoms",
        "horaDarreraEntrada"
      ]
    },
    "Directori": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Directori",
      "type": "object",
      "description": "Represents an employee in the company directory.",
      "properties": {
        "nom": { "type": "string" },
        "cognom": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "edifici": { "type": "string" },
        "empresa": { "type": "string" },
        "departament": { "type": "string" },
        "carrec": { "type": "string" },
        "descripcioCarrec": { "type": "string" },
        "telefons": {
          "type": "array",
          "items": { "type": "string" }
        },
        "fotoUrl": { "type": "string", "format": "uri" },
        "responsable": { "type": "string", "format": "email" },
        "planta": { "type": "string" },
        "centreCost": { "type": "string" }
      },
      "required": [
        "nom",
        "cognom",
        "email",
        "empresa",
        "departament",
        "carrec"
      ]
    },
    "Departament": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Departament",
      "type": "object",
      "description": "Represents a department in the company.",
      "properties": {
        "name": { "type": "string", "description": "The name of the department."}
      },
      "required": ["name"]
    }
  },
  "auth": {
    "providers": [
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Includes denormalized 'role' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/attendance_records/{attendanceRecordId}",
        "definition": {
          "entityName": "AttendanceRecord",
          "schema": {
            "$ref": "#/backend/entities/AttendanceRecord"
          },
          "description": "Stores attendance records for employees. Includes employeeId for filtering attendance by employee.",
          "params": [
            {
              "name": "attendanceRecordId",
              "description": "The unique identifier for the attendance record."
            }
          ]
        }
      },
      {
        "path": "/terminals/{terminalId}",
        "definition": {
          "entityName": "Terminal",
          "schema": {
            "$ref": "#/backend/entities/Terminal"
          },
          "description": "Stores terminal information.",
          "params": [
            {
              "name": "terminalId",
              "description": "The unique identifier for the terminal."
            }
          ]
        }
      },
      {
        "path": "/incident_types/{incidentTypeId}",
        "definition": {
          "entityName": "IncidentType",
          "schema": {
            "$ref": "#/backend/entities/IncidentType"
          },
          "description": "Stores incident types.",
          "params": [
            {
              "name": "incidentTypeId",
              "description": "The unique identifier for the incident type."
            }
          ]
        }
      },
      {
        "path": "/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee information.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "/visit_registrations/{visitRegistrationId}",
        "definition": {
          "entityName": "VisitRegistration",
          "schema": {
            "$ref": "#/backend/entities/VisitRegistration"
          },
          "description": "Stores visit registration information.",
          "params": [
            {
              "name": "visitRegistrationId",
              "description": "The unique identifier for the visit registration."
            }
          ]
        }
      },
      {
        "path": "/favorite_visitors/{favoriteVisitorId}",
        "definition": {
          "entityName": "FavoriteVisitor",
          "schema": {
            "$ref": "#/backend/entities/FavoriteVisitor"
          },
          "description": "Stores favorite visitor information.",
          "params": [
            {
              "name": "favoriteVisitorId",
              "description": "The unique identifier for the favorite visitor."
            }
          ]
        }
      },
      {
        "path": "/usuaris_dins/{usuariId}",
        "definition": {
          "entityName": "UsuariDins",
          "schema": {
            "$ref": "#/backend/entities/UsuariDins"
          },
          "description": "Stores users currently in the office. This collection acts as a 'whiteboard' updated by a background process.",
          "params": [
            {
              "name": "usuariId",
              "description": "The unique identifier for the user (e.g., P_CI)."
            }
          ]
        }
      },
      {
        "path": "/directori/{directoriId}",
        "definition": {
          "entityName": "Directori",
          "schema": {
            "$ref": "#/backend/entities/Directori"
          },
          "description": "Stores employee directory information.",
          "params": [
            {
              "name": "directoriId",
              "description": "The unique identifier for the directory entry (e.g., email)."
            }
          ]
        }
      },
      {
        "path": "/departaments/{departamentId}",
        "definition": {
          "entityName": "Departament",
          "schema": {
            "$ref": "#/backend/entities/Departament"
          },
          "description": "Stores the list of unique departments for filtering.",
          "params": [
            {
              "name": "departamentId",
              "description": "The department name."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the core features of the Clockwork application, emphasizing security, scalability, and debuggability, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Queries are not Filters).  \n\n**Authorization Independence:** Achieved through denormalization. For example, user roles are stored directly in the `users` document to avoid `get()` calls in security rules when accessing user-specific data.\n\n**Structural Segregation:** Different types of data (e.g., user profiles, attendance records, visit registrations, and favorite visitors) are stored in separate collections, each with its own specific security rules.\n\n**Access Modeling:**\n*   User data is stored under `/users/{userId}`, enabling path-based access control.\n*   Attendance records are stored under `/attendance_records/{attendanceRecordId}` with the `employeeId` stored within each record for querying and filtering.\n*   Visit registrations are stored under `/visit_registrations/{visitRegistrationId}` to store data related to registered visits.\n*   Favorite visitors are stored under `/favorite_visitors/{favoriteVisitorId}` to manage a list of recurring or important visitors.\n*   **Whiteboard Collection:** The new `usuaris_dins` collection is a real-time 'whiteboard' of present users. It's designed to be written to by a trusted backend process (Cloud Function) and read by many clients, which is a highly efficient pattern.\n*   **Directory Collection:** The new `directori` collection stores detailed employee information for a company-wide directory.\n*   **Departments Collection:** A new `departaments` collection is added to store a list of unique department names. This is a read-only (for clients) collection populated by a cloud function, which avoids the need for clients to perform an insecure and inefficient full scan on the `directori` collection just to populate a filter dropdown. This is a key performance and security optimization.\n\n**QAPs Support:** The structure enables secure `list` operations. For example, listing attendance records requires checking the user's role or ownership of the employee being queried. Reading the `usuaris_dins` collection will be open to any authenticated user, as it contains non-sensitive presence information.\n\n**Denormalization Strategy:** To ensure Authorization Independence (CRITICAL), the `users` collection stores roles directly in the document. This avoids hierarchical authorization dependencies and enables atomic operations. The `usuaris_dins` collection is itself a form of denormalization for fast reads.\n\nThis structure enables secure and efficient data access while ensuring that security rules are clear, maintainable, and do not rely on complex hierarchical `get()` calls."
  }
}
