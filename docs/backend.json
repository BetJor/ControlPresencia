{
  "entities": {
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Employee entity."
        },
        "firstName": {
          "type": "string",
          "description": "The employee's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The employee's last name."
        },
        "email": {
          "type": "string",
          "description": "The employee's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Terminal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Terminal",
      "type": "object",
      "description": "Represents a terminal used for attendance tracking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Terminal entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the terminal."
        },
        "location": {
          "type": "string",
          "description": "The location of the terminal."
        }
      },
      "required": [
        "id",
        "name",
        "location"
      ]
    },
    "IncidentType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IncidentType",
      "type": "object",
      "description": "Represents a type of incident that can be associated with an attendance record.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the IncidentType entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the incident type."
        },
        "description": {
          "type": "string",
          "description": "A description of the incident type."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "AttendanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AttendanceRecord",
      "type": "object",
      "description": "Represents an attendance record for an employee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AttendanceRecord entity."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to Employee. (Relationship: Employee 1:N AttendanceRecord)"
        },
        "terminalId": {
          "type": "string",
          "description": "Reference to Terminal. (Relationship: Terminal 1:N AttendanceRecord)"
        },
        "incidentTypeId": {
          "type": "string",
          "description": "Reference to IncidentType. (Relationship: IncidentType 1:N AttendanceRecord). Can be null if no incident."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of the attendance record.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "employeeId",
        "terminalId",
        "timestamp"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firebaseUid": {
          "type": "string",
          "description": "The Firebase UID associated with the user."
        },
        "role": {
          "type": "string",
          "description": "The role of the user (e.g., admin, standard).",
          "format": "string"
        }
      },
      "required": [
        "id",
        "firebaseUid",
        "role"
      ]
    },
    "VisitRegistration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VisitRegistration",
      "type": "object",
      "description": "Represents a registration of a visit including the name and company",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the VisitRegistration entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the visitor."
        },
        "company": {
          "type": "string",
          "description": "Company of the visitor."
        }
      },
      "required": [
        "id",
        "name",
        "company"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Includes denormalized 'role' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/attendance_records/{attendanceRecordId}",
        "definition": {
          "entityName": "AttendanceRecord",
          "schema": {
            "$ref": "#/backend/entities/AttendanceRecord"
          },
          "description": "Stores attendance records for employees. Includes employeeId for filtering attendance by employee.",
          "params": [
            {
              "name": "attendanceRecordId",
              "description": "The unique identifier for the attendance record."
            }
          ]
        }
      },
      {
        "path": "/terminals/{terminalId}",
        "definition": {
          "entityName": "Terminal",
          "schema": {
            "$ref": "#/backend/entities/Terminal"
          },
          "description": "Stores terminal information.",
          "params": [
            {
              "name": "terminalId",
              "description": "The unique identifier for the terminal."
            }
          ]
        }
      },
      {
        "path": "/incident_types/{incidentTypeId}",
        "definition": {
          "entityName": "IncidentType",
          "schema": {
            "$ref": "#/backend/entities/IncidentType"
          },
          "description": "Stores incident types.",
          "params": [
            {
              "name": "incidentTypeId",
              "description": "The unique identifier for the incident type."
            }
          ]
        }
      },
      {
        "path": "/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee information.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "/visit_registrations/{visitRegistrationId}",
        "definition": {
          "entityName": "VisitRegistration",
          "schema": {
            "$ref": "#/backend/entities/VisitRegistration"
          },
          "description": "Stores visit registration information.",
          "params": [
            {
              "name": "visitRegistrationId",
              "description": "The unique identifier for the visit registration."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the core features of the Clockwork application, emphasizing security, scalability, and debuggability, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Queries are not Filters).  \n\n**Authorization Independence:** Achieved through denormalization. For example, user roles are stored directly in the `users` document to avoid `get()` calls in security rules when accessing user-specific data.\n\n**Structural Segregation:** Different types of data (e.g., user profiles, attendance records, and visit registrations) are stored in separate collections, each with its own specific security rules.\n\n**Access Modeling:**\n*   User data is stored under `/users/{userId}`, enabling path-based access control.\n*   Attendance records are stored under `/attendance_records/{attendanceRecordId}` with the `employeeId` stored within each record for querying and filtering.\n*   Visit registrations are stored under `/visit_registrations/{visitRegistrationId}` to store data related to registered visits.\n\n**QAPs Support:** The structure enables secure `list` operations. For example, listing attendance records requires checking the user's role or ownership of the employee being queried.\n\n**Denormalization Strategy:** To ensure Authorization Independence (CRITICAL), the `users` collection stores roles directly in the document. This avoids hierarchical authorization dependencies and enables atomic operations.\n\nThis structure enables secure and efficient data access while ensuring that security rules are clear, maintainable, and do not rely on complex hierarchical `get()` calls."
  }
}